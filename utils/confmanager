#!/bin/bash

# I have a git bare repository set up to manage my dotfiles in my home directory.
# I use this script to be able to manage files and make commits easier and faster.

print_usage() {
    echo "Usage: 
   to show status:    confmanager s
   to show logs:      confmanager l
   to push to remote: confmanager p
   to show diff:      confmanager d file
   to add files:      confmanager a file1 file2 ... ['commit message']
   to remove files:   confmanager r file1 file2 ... ['commit message']
   to commit changes: confmanager c 'commit message'"
}

arg_array=( "$@" ) # all arguments
len=${#arg_array[@]} # number of arguments

[ $len -eq 0 ] && print_usage && exit 1; # exit if no args found

action=$1 # action to execute (add, remove, etc.)

# checking if the last argument is a a file, a directory or a commit message
if [ -f  "${arg_array[$len-1]}" ] || [ -d "${arg_array[$len-1]}" ]; then 
    commit_msg="" # last arg is not a commit message
else
    commit_msg=${arg_array[$len-1]} # last arg is a commit message
fi

git_command="/usr/bin/git --git-dir=$HOME/.myconf/ --work-tree=$HOME" # the command to manage the bare repo

if [ "$action" == "a" ]; then
    [ $len -lt 2 ] && print_usage && exit 1 # exit if arguments are wrong
    # if commit_msg is not empty, then args from second to the one before the last are the files to add,
    # otherwise args from the second to the last are the files to add
    [ -n "$commit_msg" ] && files="${@:2:$len-2}" || files="${@:2:$len-1}"
    $git_command add $files
    [ -n "$commit_msg" ] && $git_command commit -m "$commit_msg" # if commit_msg is not empty commit changes
elif [ "$action" == "c" ]; then
    [ $len -lt 2 ] && print_usage && exit 1 # exit if arguments are wrong
    [ -n "$commit_msg" ] && $git_command commit -m "$commit_msg" || print_usage && exit 1 # if commit_msg is not empty commit changes
elif [ "$action" == "r" ]; then
    [ $len -lt 2 ] && print_usage && exit 1 # exit if arguments are wrong
    [ -n "$commit_msg" ] && files="${@:2:$len-2}" || files="${@:2:$len-1}"
    $git_command rm --cached $files
    [ -n "$commit_msg" ] && $git_command commit -m "$commit_msg" # if commit_msg is not empty commit changes
elif [ "$action" == "d" ]; then
    [ $len -gt 2 ] && print_usage && exit 1 # exit if arguments are wrong
    file=$2 # second arg is the file
    $git_command diff $file
elif [ "$action" == "s" ]; then
    [ $len -gt 1 ] && print_usage && exit 1 # exit if arguments are wrong
    $git_command status
elif [ "$action" == "l" ]; then
    [ $len -gt 1 ] && print_usage && exit 1 # exit if arguments are wrong
    $git_command log
elif [ "$action" == "p" ]; then
    [ $len -gt 1 ] && print_usage && exit 1 # exit if arguments are wrong
    $git_command push
else
    print_usage
fi


