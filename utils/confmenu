#!/usr/bin/env bash

config_paths=(
    "$HOME/.config" 
    "$HOME/source/suckless-builds"
    "$HOME/source/scripts"
)

# cache files
cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/confmenu"
recent_cache="$cache_dir/recent"
all_cache="$cache_dir/all"
list="$cache_dir/list"
list_no_dups="$cache_dir/list_no_dups"

mkdir -p "$cache_dir"

# dmenu settings
prompt="ÔÅÑ edit:"
dmenu_cmd="dmenu -lh 26 -l 20 -c -i $@"

# find a terminal emulator
if [ -z "$TERMINAL" ]; then
    if [ "$(which st)" ]; then
        TERMINAL="st -e"
    elif [ "$(which terminal)" ]; then
        TERMINAL="terminal -e"
    elif [ "$(which urxvt)" ]; then
        TERMINAL="urxvt -e"
    elif [ "$(which termite)" ]; then
        TERMINAL="termite -e"
    elif [ "$(which terminator)" ]; then
        TERMINAL="terminator -e"
    elif [ "$(which gnome-terminal)" ]; then
        TERMINAL="gnome-terminal -e"
    elif [ "$(which lxterminal)" ]; then
        TERMINAL="lxterminal -e"
    elif [ "$(which sakura)" ]; then
        TERMINAL="sakura -e"
    elif [ "$(which xfce4-terminal)" ]; then
        TERMINAL="xfce4-terminal -e"
    elif [ "$(which xterm)" ]; then
        TERMINAL="xterm -e"
    elif [ "$(which kitty)" ]; then
        TERMINAL="kitty -e"
    fi
fi

update_cache() {
    sed -i "\|$1|d" "$recent_cache"
    echo -e "$1\n$(< "$recent_cache")" > "$recent_cache"
}

# get the contents of the config folders and create recent_cache if it does not exist
config_list=$(find "${config_paths[@]}" -type f -maxdepth 2 -not -path '*/\.git/*')
[ ! -f "$recent_cache" ] && echo "$config_list" > "$recent_cache"

# always write the full list to all_cache, so the list will be always up to date
echo "$config_list" > "$all_cache"

# remove anything from recent_cache that is not present in all_cache
for line in $(grep -vxf "$all_cache" "$recent_cache"); do
    sed -i "\|$line|d" "$recent_cache"
done

# merge our recent cache with the full list
cat "$recent_cache" "$all_cache" > "$list"

# find the first occurrences of every entry and remove any other occurrences,
# so there will be no duplicates in the list
awk '!visited[$0]++' "$list" > "$list_no_dups"

# read in the full list without duplicates
list=$(< "$list_no_dups")

# replace $HOME with ~ for every list item
list=$(echo "$list" | sed "s\\$HOME\~\g")

# pipe the list items into dmenu
item=$(printf '%s\n' "${list[@]}" | $dmenu_cmd -p "$prompt")

# exit if the user did not pick an item
[[ -n $item ]] || exit

# undo the replacement for the picked item (otherwise won't open correctly)
item=$(echo "$item" | sed "s\~\\$HOME\g")

update_cache "$item"

# determine on which path the picked item is and open it in $EDITOR
$TERMINAL_CMD $EDITOR "$item"
